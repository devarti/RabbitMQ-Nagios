#!/usr/bin/env perl

#$Ida get_rabbitmq_state,v 1.0 2013/09/11 13:04:21 DPathak Exp Dpathak $
#
####  check_rabbitmq_state this script can be run as Nagios user which relies on the data 
####  Taken by get_rabbitmq_stat file which will be run by hostmon.
# No ARG needed.
# 

##############################################################################
use strict;
use warnings;

use Nagios::Plugin ;
use URI::Escape;
use Data::Dumper;
use Sys::Hostname;

use vars qw($VERSION $PROGNAME  $verbose $timeout);
$VERSION = '1.0';

# get the base name of this script for use in the examples
use File::Basename;
$PROGNAME = basename($0);


##############################################################################
# define and get the command line options.


# Instantiate Nagios::Plugin object (the 'usage' parameter is mandatory)

my $spec = {
	RemoteAddress => '127.0.0.1',
	RemotePort => { default => 5672 },
	Username => { default => 'guest' },
	Password => { default => 'guest' },
	VirtualHost => { default => '/' },
	
	Logger => 0,
	Debug => { default => {} },
	
	Alias => { default => 'amqp_client' },
	AliasTCP => { default => 'tcp_client' },
	Callbacks => { default => {} },
	
	Channels => { default => {} },
	is_started => { default => 0 },
};

my $p = Nagios::Plugin->new(
    usage => "Usage: %s",
    license => "",
    version => $VERSION,
    blurb => 'This plugin uses the RabbitMQ management aliveness-check to send/receive a message through a vhost.',
);

$p->add_arg(spec => 'port=i',
    help => "Specify the port to connect to (default: %s)",
    default => 55672
);

$p->add_arg(spec => 'user|u=s',
    help => "Username (default: %s)",
    default => "guest",
);
$p->add_arg(spec => 'password|p=s',
    help => "Password (default: %s)",
    default => "guest"
);

$p->add_arg(spec => 'vhost=s',
    help => "Specify the vhost to test (default: %s)",
    default => "/"
);

$p->add_arg(spec => 'ssl|ssl!',
    help => "Use SSL (default: false)",
    default => 0
);

$p->add_arg(spec => 'proxy|proxy!',
    help => "Use environment proxy (default: true)",
    default => 1
);

$p->add_arg(spec => 'node|n=s',
    help => "Specify the node name (default is hostname)"
);


# Parse arguments and process standard ones (e.g. usage, help, version)
$p->getopts;


# perform sanity checking on command line options


##############################################################################
# check stuff.

my $hostname = hostname;
my $nodename = $p->opts->node;

if (!$nodename) {
    $hostname =~ /^([a-zA-Z0-9-]*)/;
    $nodename = $1;
}
my $port=$p->opts->port;
my $vhost=uri_escape($p->opts->vhost);
my $path = "connections/rabbit\@$nodename";
my $url = sprintf("http%s://%s:%d/api/connections",($p->opts->ssl ? "s" : ""), $hostname, $port) ;

my $source = "/var/tmp/capture_rabbit_state/rmq_state.txt";

my $string1 = "running";
my $string2 = "blocking";
my $string3 = "blocked";
my $line = undef;

use File::stat;

$p->nagios_exit( CRITICAL, "State file is older than 5 minutes...") if (time - stat("$source")->mtime) > 300;

open(FH1, $source);

my @data = <FH1>;

my @st1cnt = grep /$string1/,@data;

my @st2cnt = grep /$string2/,@data;

my @st3cnt = grep /$string3/,@data;

my $rngcnt = scalar(@st1cnt);

my $bkgcnt = scalar(@st2cnt);

my $bkdcnt = scalar(@st3cnt);

close (FH1);

if ($rngcnt gt "0" && $bkgcnt eq "0" && $bkdcnt eq "0") {

$p->nagios_exit( OK, "Total Running: $rngcnt" );

	} elsif ($rngcnt le "0") {

$p->nagios_exit( CRITICAL, "... no connections ...");

	} elsif ($bkgcnt gt "0" || $bkdcnt gt "0") {

$p->nagios_exit( CRITICAL, "RabbitMQ Connections are => Running: $rngcnt, Blocking: $bkgcnt, Blocked: $bkdcnt");

	} else {

$p->nagios_exit( CRITICAL, "RabbitMQ Connections are => Running: $rngcnt, Blocking: $bkgcnt, Blocked: $bkdcnt");


};

#system ("rm -f $source");

system ("chown -R nagios:nagios $source");
